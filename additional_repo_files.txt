# .gitignore
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.vscode/
.idea/
*.log
conversations.json
instance/
.webassets-cache
node_modules/
.DS_Store
Thumbs.db

# ================================
# .env.example
# ================================

# Scuba AI Configuration
# Copy this file to .env and customize as needed

# API Configuration (REQUIRED)
GROQ_API_KEY=your_groq_api_key_here
MODEL_NAME=llama-3.1-8b-instant

# Server Configuration
PORT=3000
DEBUG=True
SECRET_KEY=your-secret-key-change-this-in-production

# Host Configuration (for production)
HOST=0.0.0.0

# ================================
# LICENSE
# ================================

MIT License

Copyright (c) 2025 Scuba AI

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

# ================================
# CONTRIBUTING.md
# ================================

# Contributing to Scuba AI

We welcome contributions to Scuba AI! This document provides guidelines for contributing to the project.

## Code of Conduct

- Be respectful and inclusive
- Focus on constructive feedback
- Help create a welcoming environment for all contributors

## How to Contribute

### Reporting Bugs

1. Check if the bug has already been reported in [Issues](https://github.com/scuba25/Scuba-AI-unrestricted-ai/issues)
2. If not, create a new issue with:
   - Clear description of the problem
   - Steps to reproduce
   - Expected vs actual behavior
   - System information (OS, Python version, etc.)

### Suggesting Features

1. Check [Issues](https://github.com/scuba25/Scuba-AI-unrestricted-ai/issues) for existing feature requests
2. Create a new issue with:
   - Clear description of the feature
   - Use case and benefits
   - Possible implementation approach

### Contributing Code

1. **Fork the repository**
2. **Create a feature branch**:
   ```bash
   git checkout -b feature/your-feature-name
   ```
3. **Make your changes**:
   - Follow the existing code style
   - Add comments for complex logic
   - Include error handling
4. **Test your changes**:
   - Ensure the app starts correctly
   - Test core functionality
   - Verify mobile responsiveness
5. **Commit your changes**:
   ```bash
   git commit -m "Add feature: description of your feature"
   ```
6. **Push to your fork**:
   ```bash
   git push origin feature/your-feature-name
   ```
7. **Create a Pull Request**

## Development Setup

1. Clone your fork:
   ```bash
   git clone https://github.com/YOUR-USERNAME/Scuba-AI-unrestricted-ai.git
   ```
2. Install dependencies:
   ```bash
   cd Scuba-AI-unrestricted-ai
   pip install -r requirements.txt
   ```
3. Set up environment variables:
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```
4. Run the application:
   ```bash
   python app.py
   ```

## Code Style Guidelines

### Python Code
- Follow PEP 8 style guide
- Use meaningful variable names
- Add docstrings for functions
- Include type hints where appropriate
- Maximum line length: 88 characters

### HTML/CSS/JavaScript
- Use consistent indentation (2 spaces)
- Keep CSS organized and commented
- Use semantic HTML elements
- Ensure mobile responsiveness

### Git Commit Messages
- Use present tense ("Add feature" not "Added feature")
- Keep first line under 50 characters
- Add detailed description if needed
- Reference issues with #issue-number

## Testing

- Test on multiple browsers (Chrome, Firefox, Safari)
- Verify mobile responsiveness
- Test with different API keys
- Check error handling

## Documentation

- Update README.md if needed
- Add inline comments for complex code
- Update docstrings for function changes

## Pull Request Guidelines

- Fill out the pull request template
- Link related issues
- Include screenshots for UI changes
- Ensure all tests pass
- Request review from maintainers

## Questions?

If you have questions about contributing, please:
1. Check existing [Issues](https://github.com/scuba25/Scuba-AI-unrestricted-ai/issues)
2. Create a new issue with the "question" label
3. Join our [Discussions](https://github.com/scuba25/Scuba-AI-unrestricted-ai/discussions)

Thank you for contributing to Scuba AI! 🤿

# ================================
# SECURITY.md
# ================================

# Security Policy

## Supported Versions

We actively support and provide security updates for the following versions:

| Version | Supported          |
| ------- | ------------------ |
| 1.x.x   | ✅ Yes             |
| < 1.0   | ❌ No              |

## Reporting a Vulnerability

We take security seriously. If you discover a security vulnerability, please follow these steps:

### 🔒 Private Reporting

**DO NOT** create a public GitHub issue for security vulnerabilities.

Instead, please email us at: **security@scubaaai.info**

### 📧 What to Include

When reporting a security vulnerability, please include:

1. **Description**: Clear description of the vulnerability
2. **Steps to Reproduce**: Detailed steps to reproduce the issue
3. **Impact**: Potential impact of the vulnerability
4. **Affected Versions**: Which versions are affected
5. **Suggested Fix**: If you have suggestions for fixing the issue

### ⏱️ Response Timeline

- **Acknowledgment**: Within 48 hours
- **Initial Assessment**: Within 5 business days
- **Status Updates**: Weekly until resolved
- **Resolution**: Target within 30 days for critical issues

### 🛡️ Security Measures

Scuba AI implements several security measures:

- **Input Validation**: All user inputs are validated and sanitized
- **Session Management**: Secure session handling with unique IDs
- **API Security**: Secure API key management and validation
- **Error Handling**: Secure error messages that don't expose system information
- **HTTPS Ready**: Application supports HTTPS deployment

### 🔐 Best Practices for Users

To keep your Scuba AI installation secure:

1. **Keep Updated**: Always use the latest version
2. **Secure API Keys**: Store API keys securely, never commit to version control
3. **HTTPS**: Use HTTPS in production environments
4. **Firewall**: Configure appropriate firewall rules
5. **Access Control**: Limit access to the application as needed
6. **Regular Backups**: Backup your conversations and configuration

### 🚨 Security Vulnerabilities We Address

We take seriously:
- Authentication bypasses
- Authorization flaws
- Code injection vulnerabilities
- Cross-site scripting (XSS)
- Cross-site request forgery (CSRF)
- SQL injection
- Server-side request forgery (SSRF)
- Information disclosure
- Denial of service vulnerabilities

### 📜 Responsible Disclosure

We believe in responsible disclosure:

1. **Coordination**: We'll work with you to understand and fix the issue
2. **Credit**: We'll credit you in our security advisories (if desired)
3. **Timeline**: We'll coordinate on disclosure timeline
4. **Updates**: We'll keep you informed throughout the process

### 🏆 Security Hall of Fame

We maintain a list of security researchers who have helped improve Scuba AI security. If you report a valid security vulnerability, we'll add you to our hall of fame (with your permission).

### 📞 Contact Information

- **Security Email**: security@scubaaai.info
- **General Contact**: [GitHub Issues](https://github.com/scuba25/Scuba-AI-unrestricted-ai/issues)
- **Website**: [scubaaai.info](https://scubaaai.info)

Thank you for helping keep Scuba AI secure! 🤿🔒

# ================================
# Dockerfile
# ================================

FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create non-root user
RUN useradd -m -u 1000 scubaai && chown -R scubaai:scubaai /app
USER scubaai

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/ || exit 1

# Run application
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:3000", "app:app"]

# ================================
# docker-compose.yml
# ================================

version: '3.8'

services:
  scuba-ai:
    build: .
    container_name: scuba-ai
    ports:
      - "3000:3000"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - MODEL_NAME=${MODEL_NAME:-llama-3.1-8b-instant}
      - DEBUG=${DEBUG:-False}
      - HOST=0.0.0.0
      - PORT=3000
    volumes:
      - ./conversations.json:/app/conversations.json
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ================================
# start.sh - Development Startup Script
# ================================

#!/bin/bash
echo "🤿 Starting Scuba AI in development mode..."
echo "Loading virtual environment..."

# Activate virtual environment
if [ -f "venv/bin/activate" ]; then
    source venv/bin/activate
elif [ -f "venv/Scripts/activate" ]; then
    source venv/Scripts/activate
else
    echo "⚠️  Virtual environment not found. Installing dependencies globally..."
fi

# Check if dependencies are installed
python -c "import flask" 2>/dev/null || {
    echo "📦 Installing dependencies..."
    pip install -r requirements.txt
}

# Start the application
echo "🚀 Starting Scuba AI on http://localhost:3000"
python app.py

# ================================
# start-production.sh - Production Startup Script
# ================================

#!/bin/bash
echo "🤿 Starting Scuba AI in production mode..."

# Activate virtual environment
if [ -f "venv/bin/activate" ]; then
    source venv/bin/activate
elif [ -f "venv/Scripts/activate" ]; then
    source venv/Scripts/activate
else
    echo "⚠️  Virtual environment not found. Installing dependencies globally..."
fi

# Check if gunicorn is installed
python -c "import gunicorn" 2>/dev/null || {
    echo "📦 Installing gunicorn..."
    pip install gunicorn
}

# Start with gunicorn
echo "🚀 Starting Scuba AI production server..."
echo "🌐 Access at: http://localhost:3000"
gunicorn -w 4 -b 0.0.0.0:3000 --timeout 120 --keep-alive 2 app:app

# ================================
# update.sh - Update Script
# ================================

#!/bin/bash
echo "🔄 Updating Scuba AI..."

# Check if we're in a git repository
if [ ! -d ".git" ]; then
    echo "❌ Error: Not in a git repository"
    exit 1
fi

# Pull latest changes
echo "📥 Pulling latest changes..."
git pull origin main

# Activate virtual environment
if [ -f "venv/bin/activate" ]; then
    source venv/bin/activate
elif [ -f "venv/Scripts/activate" ]; then
    source venv/Scripts/activate
fi

# Update dependencies
echo "📦 Updating dependencies..."
pip install -r requirements.txt --upgrade

echo "✅ Update complete!"
echo "🚀 Restart your application to use the latest version"

# ================================
# CHANGELOG.md
# ================================

# Changelog

All notable changes to Scuba AI will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Initial release of Scuba AI
- Unfiltered AI assistant with modern web interface
- Mobile-responsive design
- Real-time chat with typing indicators
- Conversation persistence
- Docker support
- One-command installation script

### Features
- **UI/UX**: Modern gradient design with fixed header
- **Mobile Support**: Fully responsive design for all devices
- **API Integration**: Groq LLaMA model integration
- **Session Management**: Persistent conversation history
- **PWA Ready**: Progressive Web App capabilities
- **Easy Deployment**: Multiple deployment options

## [1.0.0] - 2025-01-XX

### Added
- Core chat functionality
- Flask web application
- Groq API integration
- Modern responsive UI
- Mobile optimization
- Conversation persistence
- Clear chat functionality
- Environment variable configuration
- Production deployment support

### Security
- Secure session management
- Input validation and sanitization
- Secure API key handling

### Documentation
- Comprehensive README
- Installation instructions
- Deployment guides
- Contributing guidelines
- Security policy

---

## Version History

- **v1.0.0**: Initial stable release
- **v0.9.x**: Beta testing and refinements
- **v0.8.x**: UI/UX improvements and mobile optimization
- **v0.7.x**: Core functionality development
- **v0.6.x**: API integration and testing
- **v0.5.x**: Initial prototype and proof of concept